apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "appstudio, hacbs"
  name: deprecated-image-check
spec:
  params:
    - name: IMAGE_REGISTRY
      description: "Image registry for the tested image"
      default: registry.access.redhat.com
    - name: IMAGE_REPOSITORY
      description: "Image repository name to test"
    - name: POLICY_DIR
      description: "Path to the directory containing conftest policies"
      default: "/project/repository/"
    - name: POLICY_NAMESPACE
      description: "Namespace for the conftest policy"
      default: "required_checks"

  results:
    - name: PYXIS_HTTP_CODE
      description: HTTP code returned by Pyxis API endpoint
    - description: Test output
      name: HACBS_TEST_OUTPUT

  steps:
    # Download Pyxis metadata about the image
    - name: query-pyxis
      image: registry.access.redhat.com/ubi8/ubi
      script: |
        #!/usr/bin/env bash
        echo "Querying Pyxis for $(params.IMAGE_REPOSITORY)..."
        http_code=$(curl -s -k -o $(workspaces.sanity-ws.path)/repository_data.json -w '%{http_code}' "https://catalog.redhat.com/api/containers/v1/repositories/registry/$(params.IMAGE_REGISTRY)/repository/$(params.IMAGE_REPOSITORY)")

        echo "Response code: $http_code"
        echo -n $http_code > $(results.PYXIS_HTTP_CODE.path)

    # Run the tests and save output
    - name: run-conftest
      image: quay.io/redhat-appstudio/hacbs-test:latest
      script: |
        #!/usr/bin/env sh
        http_code=$(cat $(results.PYXIS_HTTP_CODE.path))

        if [ "$http_code" == "200" ];
        then
          echo "Running conftest using $(params.POLICY_DIR) policy, $(params.POLICY_NAMESPACE) namespace"
          /usr/bin/conftest test --no-fail $(workspaces.sanity-ws.path)/repository_data.json \
          --policy $(params.POLICY_DIR) --namespace $(params.POLICY_NAMESPACE) \
          --output=json 2> $(workspaces.sanity-ws.path)/stderr.txt | tee $(workspaces.sanity-ws.path)/deprecated_image_check_output.json
          echo "Done!"
          exit 0
        elif [ "$http_code" == "404" ];
        then
          echo "Registry/image $(params.IMAGE_REGISTRY)/$(params.IMAGE_REPOSITORY) not found in Pyxis" > $(workspaces.sanity-ws.path)/stderr.txt
          cat $(workspaces.sanity-ws.path)/stderr.txt
        else
          echo "Unexpected error (HTTP code $http_code) occured for registry/image $(params.IMAGE_REGISTRY)/$(params.IMAGE_REPOSITORY) during running conftest" > $(workspaces.sanity-ws.path)/stderr.txt
          cat $(workspaces.sanity-ws.path)/stderr.txt
        fi

    # Format the test results and save them as the HACBS_TEST_OUTPUT Tekton result
    - name: test-format-result
      image: quay.io/redhat-appstudio/hacbs-test:latest
      script: |
        ERR_MSG="$(echo -n $(cat $(workspaces.sanity-ws.path)/stderr.txt))"
        ERR_MSG="${ERR_MSG:-unknown}"
        HACBS_ERROR_OUTPUT=$(jq -rc --arg date $(date +%s) --arg MSG "${ERR_MSG: 0: 3000}" --null-input \
          '{result: "ERROR", timestamp: $date, failures: $MSG}')
        HACBS_TEST_OUTPUT=$(jq -rce --arg date $(date +%s) \
          '.[] | { result: (if (.failures | length > 0) then "FAILURE" else "SUCCESS" end),
                   timestamp: $date,
                   namespace,
                   successes,
                   failures: (.failures // [])|map(.metadata.details.name) | unique
                 }' $(workspaces.sanity-ws.path)/deprecated_image_check_output.json || true)

        echo "${HACBS_TEST_OUTPUT:-${HACBS_ERROR_OUTPUT}}" | tee $(results.HACBS_TEST_OUTPUT.path)
  workspaces:
    - name: sanity-ws
